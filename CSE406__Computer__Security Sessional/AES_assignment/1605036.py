# -*- coding: utf-8 -*-
"""BitVector Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18MOtTMOl78t08PSpHkEQBQ7rmFk9Z8l6

Install The BitVector Library
"""
#pip install BitVector


"""Tables"""

from BitVector import *
Sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

InvSbox = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

Mixer = [
    [BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03"), BitVector(hexstring="01")],
    [BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02"), BitVector(hexstring="03")],
    [BitVector(hexstring="03"), BitVector(hexstring="01"), BitVector(hexstring="01"), BitVector(hexstring="02")]
]

InvMixer = [
    [BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09")],
    [BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B"), BitVector(hexstring="0D")],
    [BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E"), BitVector(hexstring="0B")],
    [BitVector(hexstring="0B"), BitVector(hexstring="0D"), BitVector(hexstring="09"), BitVector(hexstring="0E")]
]

aes_modulus = BitVector(bitstring='100011011')


import codecs
import time


def hex_to_char(hex_char):
    return chr(int(hex_char, 16))


def char_to_hex(char):
    result = str(codecs.encode(bytes(char, 'utf-8'), 'hex'), 'ascii')
    if len(result) == 1:
        result = '0' + result
    return result


def byte_substitute(hex_str, sub_box):
    b = BitVector(hexstring=hex_str)
    int_val = b.intValue()
    s = sub_box[int_val]
    s = BitVector(intVal=s, size=8)
    return s.get_bitvector_in_hex()


# ---------------------      Task 1 : word generation    ---------------------
def g_function(word, rci):
    list_word = list(word)
    list_word.append(list_word.pop(0))
    list_word = [byte_substitute(hex_str, Sbox) for hex_str in list_word]
    result = int(list_word[0], 16) ^ int(rci, 16)
    list_word[0] = '{:x}'.format(result)
    return tuple(list_word)


def xor_words(word1, word2):
    list_word1 = list(word1)
    list_word2 = list(word2)
    xored_word = []
    for i in range(4):
        result = int(list_word1[i], 16) ^ int(list_word2[i], 16)
        hex_char = '{:x}'.format(result)
        if len(hex_char) == 1:
            hex_char = '0' + hex_char
        xored_word.append(hex_char)
    return tuple(xored_word)


def get_words(hex_key):
    word_list = []
    for i in range(4):
        word_list.append(tuple(hex_key[i * 4: i * 4 + 4]))

    bv1 = BitVector(hexstring="01")
    bv2 = BitVector(hexstring="02")
    for i in range(10):
        word_list.append(xor_words(word_list[-4], g_function(word_list[-1], bv1.get_bitvector_in_hex())))
        bv1 = bv1.gf_multiply_modular(bv2, aes_modulus, 8)
        for j in range(3):
            word_list.append(xor_words(word_list[-4], word_list[-1]))

    return word_list


# ---------------------      Task 2 : Encryption    ---------------------
debug = False
debug1 = False


def substitute_matrix(text_matrix, sub_box):
    for i in range(4):
        for j in range(4):
            text_matrix[i][j] = byte_substitute(text_matrix[i][j], sub_box)


def shift_rows(text_matrix):
    text_matrix[1].append(text_matrix[1].pop(0))
    text_matrix[2].append(text_matrix[2].pop(0))
    text_matrix[2].append(text_matrix[2].pop(0))
    text_matrix[3].insert(0, text_matrix[3].pop(-1))


def mix_columns(text_matrix, mixer):
    new_text_matrix = [['*'] * 4 for i in range(4)]
    for i in range(4):
        for j in range(4):
            element = BitVector(hexstring="00")
            for k in range(4):
                result = mixer[i][k].gf_multiply_modular(BitVector(hexstring=text_matrix[k][j]), aes_modulus, 8)
                element = element ^ result
            new_text_matrix[i][j] = element.get_bitvector_in_hex()
    return new_text_matrix


def add_round_key(text_matrix, key_list):
    for i in range(4):
        for j in range(4):
            result = int(text_matrix[j][i], 16) ^ int(key_list[i][j], 16)
            text_matrix[j][i] = '{:x}'.format(result)


def encrypt_16_bit(text, word_list):
    text_list = list(text)
    text_matrix = [['*'] * 4 for i in range(4)]
    for i in range(4):
        for j in range(4):
            text_matrix[j][i] = char_to_hex(text_list[i * 4 + j])

    add_round_key(text_matrix, word_list[:4])
    if debug1:
        print(text_matrix)
    for i in range(9):
        substitute_matrix(text_matrix, Sbox)
        if debug:
            print('substitute\n', text_matrix)
        shift_rows(text_matrix)
        if debug:
            print('shift\n', text_matrix)
        text_matrix = mix_columns(text_matrix, Mixer)
        if debug:
            print('mix\n', text_matrix)
        add_round_key(text_matrix, word_list[i * 4 + 4: i * 4 + 8])
        if debug or debug1:
            print(text_matrix)
    substitute_matrix(text_matrix, Sbox)
    shift_rows(text_matrix)
    add_round_key(text_matrix, word_list[40:])
    if debug1:
        print(text_matrix)

    ciphertext_list = []
    ciphertext_char_list = []
    for i in range(4):
        for j in range(4):
            if len(text_matrix[j][i]) == 1:
                ciphertext_list.append('0' + text_matrix[j][i])
            else:
                ciphertext_list.append(text_matrix[j][i])
            ciphertext_char_list.append(hex_to_char(ciphertext_list[-1]))

    return ''.join(ciphertext_list), ''.join(ciphertext_char_list)


def encrypt(text, word_list):
    text_ara = list(text)
    hex_text = [char_to_hex(c) for c in text_ara]
    print('Text in hex:', ''.join(hex_text))
    n = len(text)
    r = n // 16
    if r * 16 != n:
        for i in range(r * 16 + 16 - n):
            text += ' '
    ciphertext = ''
    ciphertext_ascii = ''
    for i in range(len(text) // 16):
        a, b = encrypt_16_bit(text[i * 16: i * 16 + 16], word_list)
        ciphertext += a
        ciphertext_ascii += b
    return ciphertext, ciphertext_ascii


# ---------------------      Task 3 : Decryption    ---------------------
debug2 = False
debug3 = False


def inv_shift_rows(text_matrix):
    text_matrix[1].insert(0, text_matrix[1].pop(-1))
    text_matrix[2].append(text_matrix[2].pop(0))
    text_matrix[2].append(text_matrix[2].pop(0))
    text_matrix[3].append(text_matrix[3].pop(0))


def decrypt_16_bit(ciphertext, word_list):
    text_matrix = [['*'] * 4 for i in range(4)]
    for i in range(4):
        for j in range(4):
            idx = i * 4 + j
            text_matrix[j][i] = ciphertext[2 * idx: 2 * idx + 2]

    add_round_key(text_matrix, word_list[40:])
    if debug2:
        print(text_matrix)
    for i in reversed(range(9)):
        inv_shift_rows(text_matrix)
        if debug3:
            print('inv_shift\n', text_matrix)
        substitute_matrix(text_matrix, InvSbox)
        if debug3:
            print('inv_substitute\n', text_matrix)
        add_round_key(text_matrix, word_list[i * 4 + 4: i * 4 + 8])
        if debug3:
            print('add round key\n', text_matrix)
        text_matrix = mix_columns(text_matrix, InvMixer)
        if debug3:
            print('inv_mix\n', text_matrix)
        if debug2 or debug3:
            print(text_matrix)
    inv_shift_rows(text_matrix)
    substitute_matrix(text_matrix, InvSbox)
    add_round_key(text_matrix, word_list[0:4])
    if debug3:
        print(text_matrix)

    deciphered_text_list = []
    deciphered_hex_list = []
    for i in range(4):
        for j in range(4):
            if len(text_matrix[j][i]) == 1:
                hex_char = '0' + text_matrix[j][i]
            else:
                hex_char = text_matrix[j][i]
            deciphered_hex_list.append(hex_char)
            deciphered_text_list.append(hex_to_char(hex_char))
    return ''.join(deciphered_text_list), ''.join(deciphered_hex_list)


def decrypt(ciphertext, word_list):
    deciphered_text = ''
    deciphered_hex = ''
    for i in range(len(ciphertext) // 32):
        a, b = decrypt_16_bit(ciphertext[i * 32: i * 32 + 32], word_list)
        deciphered_text += a
        deciphered_hex += b
    return deciphered_text, deciphered_hex


# ---------------------      Task 4 : File Handling    ---------------------


def file_encrypt(file_name):
    f = open(file_name, 'rb')
    file_content = f.read()
    f.close()


def print_keys(word_list):
    for i in range(11):
        print(f'Round {i} key:', end=' ')
        for word in word_list[i * 4: i * 4 + 4]:
            for hex_char in word:
                print(hex_char, end=' ')
        print()


if __name__ == "__main__":
    print("Enter key : ", end='')
    key = input()
    key_ara = list(key)
    if len(key_ara) < 16:
        key_ara += ['0'] * (16 - len(key_ara))
    elif len(key_ara) > 16:
        key_ara = key_ara[:16]
    hex_key = [char_to_hex(c) for c in key_ara]
    print('Key in hex:', ''.join(hex_key))

    key_scheduling_start_time = time.time()
    word_list = get_words(hex_key)
    key_scheduling_finish_time = time.time()
    print_keys(word_list)

    print("Enter text : ", end='')
    text = input()
    n = len(text)
    encryption_start_time = time.time()
    ciphertext, ciphertext_ascii = encrypt(text, word_list)
    encryption_finish_time = time.time()
    print('\nCiphertext in ascii:', ciphertext_ascii);
    print('Ciphertext in hex:', ciphertext)

    decryption_start_time = time.time()
    deciphered_text, deciphered_hex = decrypt(ciphertext, word_list)[:n]
    decryption_finish_time = time.time()
    print('\nDeciphered text in hex:', deciphered_hex)
    print('Deciphered text in ascii:', deciphered_text)

    print('\nExecution time:')
    print('Key Scheduling:', key_scheduling_finish_time - key_scheduling_start_time, 'seconds')
    print('Encryption Time:', encryption_finish_time - encryption_start_time, 'seconds')
    print('Decryption Time:', decryption_finish_time - decryption_start_time, 'seconds')
